#include <iostream>
#include <vector>
#include <string>
using namespace std;

int find_empty_cell(const vector<string>& board) {
    for (int i = 0; i < board.size(); ++i) {
        for (int j = 0; j < board[i].size(); ++j) {
            if (board[i][j] == ' ') return i * board.size() + j;
        }
    }
    return -1;
}

void swap(vector<string>& board, int pos1, int pos2) {
    swap(board[pos1 / board.size()][pos1 % board.size()], board[pos2 / board.size()][pos2 % board.size()]);
}

vector<string> switch_positions(const vector<string>& board) {
    int n = board.size() * board.size() / 2;
    int empty_cell = find_empty_cell(board);
    
    if (empty_cell < n) {
        if (board[empty_cell + 1] == 'F') {
            vector<string> new_board = board;
            swap(new_board, empty_cell, empty_cell + 1);
            return new_board;
        } else if (empty_cell + 2 < n && board[empty_cell + 2] == 'F') {
            vector<string> new_board = board;
            swap(new_board, empty_cell, empty_cell + 2);
            return new_board;
        } else {
            return {};
        }
    } else {
        if (board[empty_cell - 1] == 'T') {
            vector<string> new_board = board;
            swap(new_board, empty_cell, empty_cell - 1);
            return new_board;
        } else if (empty_cell - 2 >= n && board[empty_cell - 2] == 'T') {
            vector<string> new_board = board;


function switch_positions(board):
    n = length(board) / 2
    empty_cell = find_empty_cell(board)
    
    if empty_cell < n:
        if board[empty_cell + 1] == 'F':
            swap(board, empty_cell, empty_cell + 1)
        else if empty_cell + 2 < n and board[empty_cell + 2] == 'F':
            swap(board, empty_cell, empty_cell + 2)
        else:
            return "no solution"
    else:
        if board[empty_cell - 1] == 'T':
            swap(board, empty_cell, empty_cell - 1)
        else if empty_cell - 2 >= n and board[empty_cell - 2] == 'T':
            swap(board, empty_cell, empty_cell - 2)
        else:
            return "no solution"
    
    return board
